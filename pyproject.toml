[build-system]
requires = [
  "setuptools>=68",
  "setuptools_scm[toml]>=8.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "scippneutron"
description = "Neutron scattering tools for Data Reduction"
authors = [{ name = "Scipp contributors" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dynamic = ["version"]

# IMPORTANT:
# Run 'tox -e deps' after making changes here. This will update requirement files.
# Make sure to list one dependency per line.
dependencies = [
    "h5py",
    "mpltoolbox",
    "numpy>=1.20",
    "plopp>=24.09.1",
    "scipp>=23.07.0",
    "scippnexus>=23.11.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
all = ["scipp[all]", "pooch"]
test = [
    "hypothesis",
    "ipympl",
    "pooch",
    "psutil",
    "pytest",
    "pytest-xdist",
    "pythreejs",
    "sciline",
]

[project.urls]
"Bug Tracker" = "https://github.com/scipp/scippneutron/issues"
"Documentation" = "https://scipp.github.io/scippneutron"
"Source" = "https://github.com/scipp/scippneutron"

[tool.setuptools_scm]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
--strict-config
--strict-markers
-ra
-v
"""
testpaths = "tests"
filterwarnings = [
  "error",
  'ignore:You are running a "Debug" build of scipp:',
  # Comes from pytest_asyncio and is not our fault.
  "ignore:The 'asyncio_mode' default value will change to 'strict' in future:DeprecationWarning",
  'ignore::scipy.optimize._optimize.OptimizeWarning',
  # From flatbuffers
  'ignore:the imp module is deprecated in favour of importlib:DeprecationWarning',
  # from Mantid
  'ignore:the load_module\(\) method is deprecated:DeprecationWarning',
  # from ipywidgets; they are migrating away from ipykernel, this warning should go away
  'ignore:The `ipykernel.comm.Comm` class has been deprecated.:DeprecationWarning',
  # from h5py
  'ignore:`product` is deprecated as of NumPy 1.25.0:DeprecationWarning',
  # Plotting related warnings.
  'ignore:\n            Sentinel is not a public part of the traitlets API:DeprecationWarning',
  'ignore:Keyword `trait` is deprecated in traitlets 5.0, use `value_trait` instead:DeprecationWarning',
  'ignore:Keyword `traits` is deprecated in traitlets 5.0, use `per_key_traits` instead:DeprecationWarning',
  # TODO Plotting warnings that need to be addressed
  'ignore:Support for mapping types has been deprecated and will be dropped in a future release:DeprecationWarning',
  'ignore:The get_cmap function will be deprecated in a future version:PendingDeprecationWarning',
  'ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning',
  'ignore:Widget._active_widgets is deprecated:DeprecationWarning',
  'ignore:Widget._widget_types is deprecated:DeprecationWarning',
  'ignore:Widget.widget_types is deprecated:DeprecationWarning',
  'ignore:Widget.widgets is deprecated:DeprecationWarning',
  'ignore:Passing unrecognized arguments to super:DeprecationWarning',
]

[tool.ruff]
line-length = 88
extend-include = ["*.ipynb"]
extend-exclude = [
    ".*", "__pycache__", "build", "dist", "install",
]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = ["B", "C4", "DTZ", "E", "F", "G", "I", "PERF", "PGH", "PT", "PYI", "RUF", "S", "T20", "UP", "W"]
ignore = [
    # Conflict with ruff format, see
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812", "COM819", "D206", "D300", "E111", "E114", "E117", "ISC001", "ISC002", "Q000", "Q001", "Q002", "Q003", "W191",
]
fixable = ["B010", "I001", "PT001"]
isort.known-first-party = ["scippneutron"]
pydocstyle.convention = "numpy"

[tool.ruff.lint.per-file-ignores]
# those files have an increased risk of relying on import order
"__init__.py" = ["I"]
"tests/*" = [
    "S101",  # asserts are fine in tests
    "B018",  # 'useless expressions' are ok because some tests just check for exceptions
]
"*.ipynb" = [
    "E501",  # longer lines are sometimes more readable
    "F403",  # *-imports used with domain types
    "F405",  # linter may fail to find names because of *-imports
    "I",  # we don't collect imports at the top
    "S101",  # asserts are used for demonstration and are safe in notebooks
    "T201",  # printing is ok for demonstration purposes
]
"docs/user-guide/recipes.ipynb" = [
  "F821"  # this notebook is never executed and uses undefined names
]

[tool.ruff.format]
quote-style = "preserve"

[tool.mypy]
strict = true
ignore_missing_imports = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
warn_unreachable = true

[tool.codespell]
ignore-words-list = [
    # Codespell wants "socioeconomic" which seems to be the standard spelling.
    # But we use the word in our code of conduct which is the contributor covenant.
    # Let's not modify it if we don't have to.
    "socio-economic",
    "elemt",
]
skip = "./.git,./.tox,*/.virtual_documents,*/.ipynb_checkpoints,*.pdf,*.svg,*.csv"
